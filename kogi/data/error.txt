# NameError: name <A> is not defined
インポート忘れ: [<A_>を]たぶんインポートし忘れています。 @check_import
コメント忘れ: ここはコメントアウトした方が良さそうですね。
タイポ: たぶん軽微な打ち間違いです。落ち着いて入力し直して
タイポA: [<A_>は]たぶん、ミススペルです。

自己参照変数: `self`はメソッド内のみで使えます
未定義変数: 変数[<A_>]は未定義です。つまり、まだ一度も[<A_>に]値が代入されていません。
 初期化忘れ: 先に、`<A_> = 0`のように値を代入して初期化しておこう。@check_var
 初期化忘れ_リスト: 先に、`<A_> = []`のように空のリストを作っておこう
 初期化忘れ_データフレーム: 先に、`<A> = pd.read_csv(...)`を使って、データフレームを読んでおきましょう
 文字列かも: 文字列として`"<A_>"`のように囲むべきかも
 代入ミス: 変数への代入は、`==`ではありません。`=`で行います
 自己代入ミス: 変数を増減するときは、最初に `<A_> = 0`のように初期化しておく必要があります。
 サンプル: <A_>に相当する変数や値に置き換えましょう

未定義関数: 関数[`<A_>`]は未定義です。関数は使う前にインポートするか関数定義する必要があります。
　メソッドかも: メソッドかも知れません。
　クラスかも: [`<A_>`]はクラスかも知れません。クラス定義も確認してください。

途中: まだ途中ですね。ちゃんと書き終えてから実行してね。

構文: 構文エラー、つまり文法的に書き方が間違っています。
構文ミス: 文法的な書き間違いに原因があります。
書き方変: 書き方がどこかしら変です。よくお手本を見てください。
 言語違い: この言語はPythonではないね。（変なコードを貼り付けないで） 
 余分: うまく指摘できませんが、余分なゴミがついています。（変なコピペした？）
 全角文字: 全角文字が使われています。 @check_zen
 全角文字_空白: 全角空白が使われています。 @check_zen
 改行忘れ: 改行を忘れています
 前行: 前の行でエラーになっている可能性もあります。
 条件必要: `if`文や`while`文には条件式が必要です。
 空白必要: 予約語と変数の間には空白が必要です。
 カンマ: カンマが変だね。
 カンマ必要: カンマが必要だよ。
 カンマ余分: そこにカンマは不要だね。
 スラッシュ: スラッシュが変だよ。（そこで割ってどうする？）
 コロン: コロンが変だね。
 コロン不要: そこにコロンは不要だよ。
 コロン必要: コロンが必要だよ
 セミコロン: セミコロンが変。（コロンの打ち間違い？）
 ピリオッド: ピリオッドが変。（カンマの打ち間違い？）
 ピリオッド: そこにピリオッドは不要だね。
 if忘れ: if文を忘れているよ。
 イコール: 条件では`=`の代わりに、`==`を使います。（ちゃんと区別してね）
 インデント余分: インデントが余分だよ。
 インデント_if: インデントが変です。対応する`if`文とインデントの深さをあわせてみたら
 プリント文: 現在のPythonでは、`print`は関数です。`print(X, Y)`のように出力する内容を括弧で囲みます。Pythonの書き方を調べるときは、Python3.0以降の書き方を参考にしましょう。
 f書式内: f書式の`{ }`中にエラーがあります。
 f書式内_文字列: f書式の`{ }`中では文字列は書けません。
 ループ外_break: ループの外では`break`文は使えません
 ループ外_continue: ループの外では`continue`文は使えません
 関数外_return: 関数定義外で`return`文を使っています
 代入先_定数: 数値や定数には代入できません。`=`以降をざっくり消すとうまくいくかも
 代入先_数式: 数式や関数コールへの代入はできません。`=`以降をざっくり消すとうまくいくかも
 括弧閉じ忘れ: `)`を閉じ忘れています。もしくは`(`が余分で多すぎるときもあります。
 括弧ミスマッチ: `(`と`)`の数があいません。
 四角括弧閉じ忘れ: `]`を閉じ忘れています。もしくは`[`が余分なときもあります。
 四角括弧_ミスマッチ: `[`と`]`の数があいません。
 文字列閉じ忘れ: 文字列を閉じ忘れています。`"`と`'`がミスマッチな場合もあります。
# KeyError
軸_0: 列方向は`axis=1`だよ。
カラム名なし: 指定されたカラム名["<A_>"]がデータフレームにありません。 @check_column
変なカラム名: 文字列でないカラム名が与えられました。
# FileNotFoundError: <A> No such file or directory: <B>
ファイルなし: ファイルが見つかりません。ファイルをまだダウンロードしていないか、ファイルパスの指定が間違っています。 @check_file


型エラー: 型エラーです。期待される値と異なる種類の値を使ったときに発生します。
代入破壊: 関数に間違って代入してしまったため、関数が別の値に書き換えられています。ランタイムの再起動がすること回復します。
代入破壊_sum: `sum`に値を代入したため、`sum`が関数として使えなくなりました。 @restore_builtins

型エラー_キーワード引数A: キーワード引数[`<A_>`]は使えません。タイプミスでなければ、取り除いてみましょう。
型エラー_キーワード引数B: キーワード引数[`<B_>`]は使えません。タイプミスでなければ、取り除いてみましょう。
型エラー_多重引数B: 同じパラメータが引数とキーワード引数[`<B_>`]で同時に与えられているので、どちらか取り除いてみましょう。
型エラー_引数必要A: パラメータ数が一致しません。`<A>`に足りない引数を加えましょう。
型エラー_引数余分A: パラメータ数が一致しません。`<A>`から余分な引数を消してください。
型エラー_引数余分: パラメータ数が一致しません。余分な引数を消してください。
 引数リストかも: もしくは、引数を[1,2,3]のようにリスト化すると良いかも
 自作なら: 定義した関数やメソッドを修正した方がいい場合もあります。
 レシーバかも: （どうしてもエラーが解決しないとき）レシーバのインスタンス化が正しく行えず、クラスのままになっていることもあります。

型エラー_関数引数: 関数[`<F>`]の引数の型が間違っています。関数[`<F>`]を確認して引数を直してください。

型エラー_引数型: [`<F>`]の引数の型が間違っていて、内部でエラーになっています。
型エラー_引数型A: 関数[`<A_>`]の引数の型が違います。__<E>__になるようにしましょう。
型エラー_引数型AB: 関数[`<A_>`]の第<B>引数の型が違います。__<E>__になるようにしましょう。
型エラー_引数展開: `*`で展開するためには、リストやタプルを与えましょう。
型エラー_文字列モジュロ: 文字列のモジュロ（余り）を計算しようとしています。数値に変換してから計算してね。
型エラーイテラブルin: `x in A`のAは、文字列やリストなどのイテラブルになるようにしましょう。

メソッドなしAB: `<A_>`クラスには、`<B_>`メソッドはありません。
プロパティなしAB: `<A_>`クラスには、`<B_>`プロパティはありません。
 自作クラスなら: `<A_>`クラスに`<B_>`メソッドを追加してみるのも良いかも
レシーバ修正: たぶんメソッド名はあっているので、レシーバを直してください。
レシーバ型修正: レシーバが<E>になるように修正するといいんじゃないかな
前メソッドNone: 前のメソッドコールはNoneを返すので、続けて`<B_>`を呼べません。
レシーバNone: レシーバの変数名にNoneを代入してしまいました。 @check_assign
変数None: 変数名[`<N>`]にNoneを代入してしまいました。 @check_assign
レシーバ辞書追加: レシーバは辞書です。要素を追加するためには、辞書の代わりにセット`set()`を使った方が良いかも。
レシーバ関数: レシーバの変数名に関数コールなしで代入していませんか？ (レシーバが関数ですよ) @check_assign
メソッド修正: `<A_>`クラスの適切なメソッド名に変更してください
プロパティ修正: `<A_>`クラスの適切なプロパティ名に変更してください
関数名修正: 適切な関数名やメソッド名に変更してください。（たぶん、レシーバはあっています）
カラム名なしB: データフレームには、"`<B_>`"というカラムはありません。名前を確認して
組込関数変更: メソッドではなく、代わりに__組み込み関数__を使います。

型エラー_演算子: [`<P>`]演算子は対応していない型に使われました。[両側とも<E>になるようにしてみましょう。]
型エラー_演算子左: [`<P>`]演算子の両側の型が異なります。[左側も<E>になるようにしてみましょう。]
型エラー_演算子右: [`<P>`]演算子の両側の型が異なります。[右側も<E>になるようにしてみましょう。]
比較不可能_リスト: 大小を比較できない値が含まれています。同じ型に揃えてください。
比較不可能: 直接、大小を比較できない値同士を比較しています。両者の型を揃えてください。

展開多: 展開先の変数がデータ数に対し多すぎます。変数の数は、データ数に揃えてください。
展開少: 展開先の変数がデータ数に対し少なすぎます。変数の数は、データ数に揃えてください。
 問題番号: 問題番号が間違っていることもあります。確認してみて。

インデックス超_リスト: 添字がリストの要素数を超えないようにしましょう。 @check_index
インデックス超_文字列: 添字が文字列長を超えないようにしましょう。 @check_index
インデックス超_タプル: 添字がタプルの要素数を超えないようにしましょう。 @check_index

非関数_プロパティ: プロパティ

ValueError:
値_リスト外: リストの要素にない値を指定しています。先に要素の存在を確認しましょう。
値修正_空リストA: 関数[`<A_>`]の引数が空リストです。空にならないようにしよう。
値修正_範囲A: 関数[`<A_>`]の引数の値が範囲外です。範囲内を与えるようにしよう。
値_値過多: 値が大きすぎます。適切な値に小さくしてください。
値_データ列不一致: データ列の長さが不一致です。同じ長さのデータ列を指定してみよう。
値_次元不一致: データの次元が不一致です。同じ次元になるように修正しよう。
値_次元: データの次元が間違っています。次元数を確認しよう。
値_次元変更: 次元は、変更してもデータ数は変わらないように指定しましょう。
値_少なくとも１つ以上必要: 少なくとも１つ以上必要です。
値_オプション外: オプションに存在しない値を指定しました。オプションから選びましょう。

解説_タプル:
解説_空文: Pythonでは、何もしない空文は`pass`と書きます。よろしく。
解説_添字: 添字aiは、`a[i]`のように書きます。
解説_ソート: リストAのソートは、メソッドとしてA.sort()、関数としてsorted(A)と書きます。それぞれ、動作が異なります。
解説_シェル: シェルコマンドを実行するときは、先頭に!をつけます
解説_数学式: 数式の書き方は数学と異なります。 Pythonでは、xyは`x * y`, sinxは`sin(x)`のように書きます。
解説_キーワード引数A: キーワード引数は、<A_>=...のように指定します。
解説_キーワード引数: キーワード引数は、key=valueの形式で指定する引数です。同じkeyを繰り返してはいけません。通常の引数の__あとに__続けて書きます。
解説_for: for文は、`for x in X:` のように書き、Xの値を順番に変数xに代入しながら繰り返します。
解説_import: import文は、`import モジュール名 as 別名`のように書き、モジュールをインポートします。`as 別名`は省略できます。特定の関数のみインポートしたい場合は、from文を使います。
解説_from: from文は、`from モジュール名 import 関数名`のように書き、モジュールから指定の__関数のみ__をインポートします。
解説_elif: `elif`は`else if`の意味で__条件式が必要__です。条件式が不要なときは、`else`を使いましょう。
解説_else: `else`では上記の条件にマッチしなかった場合の処理を書きます。__条件式は書けません__。条件式を書きたいときは、`elif`を使いましょう。
解説_インクリメント: Pythonでは、インクリメント演算子は使えません。代わりに、`x += 1`のように自己代入で書きます。
解説_変数名マイナス: 変数名にはマイナスは使えません。代わりにアンダースコア`_`を使うことが多いです。
解説_特殊変数名: `__`で囲まれた変数は特別な意味がある変数名です。空白を入れてはいけません。
解説_カラム名: データフレームdfのカラムは、文字列を使って`df["A"]`のように指定します。
解説_カラム列: データフレームdfの複数のカラムは、カラム名のリストを使って`df[["A", "B", "C"]]`のように指定します。
解説_関数定義: 関数定義の書き方をおさらいしよう
解説_文字列リテラル: 関数を定義しよう
解説_入力map: `map(int, input().split())`は入力から__２つ以上の__整数を読む書き方です。`int`の部分を`str`に変更すれば、２つ以上の文字列として読み込めます。
解説_入力map: `map(int, input().split())`は入力から__２つ以上の__整数を読む書き方です。ひとつの整数を読むのは、単に`int(input())`とします。
解説_append: `append`はリストに要素を追加するメソッドです。追加できるのは、一度に__ひとつ__だけです。
解説_文字列不変: 文字列はイミュータブル、つまり変更不能です。文字列を変更するメソッドは存在しません。

注意_sum: `sum`は合計を計算する関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。
注意_min: `min`は最小値を求める関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。
注意_max: `max`は最大値を求める関数です。Pythonでは、変数名として使うと__予期せぬバグ__の原因になります。
